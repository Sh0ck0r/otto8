// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Chat() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"chat\" x-data=\"\" class=\"w-[700px] h-screen flex flex-col p-8\"><div id=\"message\" class=\"grow\"></div><form hx-post=\"/chat\" hx-target=\"#response\"><textarea name=\"message\" placeholder=\"Type your message here\" @keydown.enter=\"if (!$event.shiftKey) { $refs.submit.click(); $event.preventDefault() }\" class=\"w-full h-12 p-2 border border-gray-300 rounded-lg\"></textarea> <button x-ref=\"submit\" x-show=\"false\" type=\"submit\"></button><div id=\"response\"></div></form></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func ChatResponse(err error) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if err == nil {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div>OK</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div>Error: ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(err.Error())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/chat.templ`, Line: 23, Col: 32}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return templ_7745c5c3_Err
	})
}

func threads() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\nfunction writeThreadEvents(targetThreadDivID) {\n    const threadDiv = $(targetThreadDivID).first()\n    const threadID = threadDiv.data(\"otto-thread-id\");\n    const es = new EventSource(\"/ui/threads/\" + threadID  + \"/events\");\n\n    // Crazy state vars\n    let lastRunID = \"\";\n    let lastRunDiv = null;\n    let lastStepID = \"\";\n    let lastStepDiv = null;\n\n    // We do this because EventSource might resume itself in the middle of a run due to unforeseen circumstances.\n    es.addEventListener(\"start\", function (e) {\n        // Reset the lastRunID so that we can clear the previous run that might have\n        // been partial\n        lastRunID = \"\"\n        lastStepID = \"\"\n    })\n\n    // We do this to be done, because we are done, and we should stop doing things.\n    es.addEventListener(\"close\", function (e) {\n        es.close();\n    })\n\n    es.onmessage = (e) => {\n        const data = JSON.parse(e.data);\n        const runID = data.runID || \"\";\n\n        // If the runID is empty, we ignore the message\n        if (runID === \"\") {\n            return\n        }\n\n        // First run clear up old state\n        if (lastRunID === \"\") {\n            let found = false;\n            for (let child of threadDiv.children()) {\n                if (found) {\n                    child.remove();\n                } else if (child.id === runID) {\n                    found = true;\n                    child.remove();\n                    break;\n                }\n            }\n        }\n\n        // Add the step container if this is a new step\n        if (\"step\" in data) {\n            if (lastStepID !== data.step.id) {\n                lastStepID = data.step.id;\n                lastStepDiv = threadDiv.append($(\"<div>\", {\n                    id: \"step_\" + data.step.id,\n                    class: \"step\",\n                })).children().last()\n            }\n        }\n\n        // Add the run container if this is a new run\n        if (lastRunID !== runID) {\n            lastRunID = runID;\n            // If we have a step container, add the run to that, otherwise add it to the thread\n            lastRunDiv = (lastStepDiv || threadDiv).append($(\"<div>\", {\n                id: \"run_\" + runID,\n                class: \"run\",\n            })).children().last();\n        }\n\n        if (data.waitingOnModel) {\n            lastRunDiv.append(messageWaiting(data.time))\n            return\n        }\n\n        lastRunDiv.children(\".message-waiting-on-model\").remove();\n\n        // Process mutually exclusive messages\n\n        if (data.input) {\n            lastRunDiv.append(messageInputDiv(data.input, data.time))\n        } else if (data.stepTemplateInvoke) {\n            const newContent = JSON.stringify(data.stepTemplateInvoke)\n            const newDiv = messageInputDiv(newContent, data.time)\n            newDiv.data(\"otto-content\", newContent)\n            appendToDiv(lastRunDiv, \"message-input\", newDiv)\n        } else if (data.error) {\n            lastRunDiv.append(messageErrorDiv(data.input, data.time))\n        } else if (data.toolInput) {\n            appendToDiv(lastRunDiv, \"message-tool-input\", messageToolInputDiv(data.toolInput.content, data.time))\n        } else if (data.toolCall) {\n            lastRunDiv.children(\".message-tool-input\").remove();\n            lastRunDiv.append(messageToolCallDiv(data.toolCall.name, data.toolCall.input, data.time, data.runID))\n        } else if (data.workflowCall) {\n            lastRunDiv.children(\".message-tool-input\").remove();\n            lastRunDiv.append(messageWorkflowCallDiv(data.workflowCall.name, data.workflowCall.input, data.time, data.runID, threadID, data.workflowCall.workflowID, data.workflowCall.threadID))\n            // we added a new button\n            htmx.process(document.body)\n        } else if (data.content) {\n            appendToDiv(lastRunDiv, \"message-content\", messageContentDev(data.content, data.time))\n        }\n    };\n}\n\nfunction formatTime(time) {\n    if (time === null) {\n        return new Date().toLocaleString()\n    }\n    const date = new Date(time);\n    return date.toLocaleString();\n}\n\nfunction messageWaiting(timestamp) {\n    return $(`<div class=\"message-waiting-on-model flex justify-end\" >\n        <div class=\"flex items-start gap-2.5 mb-6\">\n            <div class=\"flex flex-col gap-1 w-full max-w-[320px]\">\n                <div class=\"flex items-center space-x-2 rtl:space-x-reverse\">\n                    <span class=\"text-sm font-semibold text-gray-900 dark:text-white\">AI</span>\n                    <span class=\"text-sm font-normal text-gray-500 dark:text-gray-400\">${formatTime(timestamp)}</span>\n                </div>\n                <div\n                    class=\"flex flex-col leading-1.5 p-4 border-gray-200 bg-gray-100 rounded-e-xl rounded-es-xl dark:bg-gray-700\">\n                    <div class=\"message-text text-sm font-normal text-gray-900 dark:text-white\">\n                        Waiting for AI response\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>`)\n}\n\nfunction messageContentDev(input, timestamp) {\n    const el = $(`<div class=\"message-content flex justify-end\" >\n        <div class=\"flex items-start gap-2.5 mb-6\">\n            <div class=\"flex flex-col gap-1 w-full max-w-[320px]\">\n                <div class=\"flex items-center space-x-2 rtl:space-x-reverse\">\n                    <span class=\"text-sm font-semibold text-gray-900 dark:text-white\">AI</span>\n                    <span class=\"text-sm font-normal text-gray-500 dark:text-gray-400\">${formatTime(timestamp)}</span>\n                </div>\n                <div\n                    class=\"flex flex-col leading-1.5 p-4 border-gray-200 bg-gray-100 rounded-e-xl rounded-es-xl dark:bg-gray-700\">\n                    <div class=\"message-text text-sm font-normal text-gray-900 dark:text-white\">\n                        ${DOMPurify.sanitize(marked.parse(input))}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>`)\n    el.data(\"otto-content\", input)\n    return el\n}\n\nfunction messageToolCallDiv(name, input, timestamp, runID) {\n    if ( input === '' || input === '{}' ) {\n       input = 'No input'\n    }\n    return $(`<div class=\"message-tool-call flex justify-end\" >\n        <div class=\"flex items-start gap-2.5 mb-6\">\n            <div class=\"flex flex-col gap-1 w-full max-w-[320px]\">\n                <div class=\"flex items-center space-x-2 rtl:space-x-reverse\">\n                    <span class=\"text-sm font-semibold text-gray-900 dark:text-white\">Tool Call: ${_.escape(name)}</span>\n                    <span class=\"text-sm font-normal text-gray-500 dark:text-gray-400\">${formatTime(timestamp)}</span>\n                </div>\n                <div\n                    class=\"flex flex-col leading-1.5 p-4 border-gray-200 bg-gray-100 rounded-e-xl rounded-es-xl dark:bg-gray-700\">\n                    <div class=\"message-text text-sm font-normal text-gray-900 dark:text-white\">\n                        ${_.escape(input)}\n                    </div>\n                </div>\n                <div class=\"flex justify-end\" >\n                    <span class=\"text-sm font-normal text-gray-500 dark:text-gray-400\">${runID}</span>\n                </div>\n            </div>\n        </div>\n    </div>`)\n}\n\nfunction messageWorkflowCallDiv(name, input, timestamp, runID, currentThreadID, workflowID, nextThreadID) {\n    const el = $(`<div class=\"message-workflow-call flex justify-end\" >\n        <div class=\"flex items-start gap-2.5 mb-6\">\n            <div class=\"flex flex-col gap-1 w-full max-w-[320px]\">\n                <div class=\"flex items-center space-x-2 rtl:space-x-reverse\">\n                    <span class=\"text-sm font-semibold text-gray-900 dark:text-white\">Workflow Call: ${_.escape(name)}</span>\n                    <span class=\"text-sm font-normal text-gray-500 dark:text-gray-400\">${formatTime(timestamp)}</span>\n                </div>\n                <button type=\"button\"\n                    class=\"text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700\"\n                    hx-target=\"#${currentThreadID}-next-thread\"\n                    hx-get=\"/ui/workflows/${workflowID}/threads/${nextThreadID}\"\n                    >\n                    Details\n                </button>\n                <div class=\"flex justify-end\" >\n                    <span class=\"text-sm font-normal text-gray-500 dark:text-gray-400\">${runID}</span>\n                </div>\n            </div>\n        </div>\n    </div>`)\n    el.data(\"otto-content\", input)\n    return el\n}\n\nfunction messageToolInputDiv(input, timestamp) {\n    const el = $(`<div class=\"message-tool-input flex justify-end\" >\n        <div class=\"flex items-start gap-2.5 mb-6\">\n            <div class=\"flex flex-col gap-1 w-full max-w-[320px]\">\n                <div class=\"flex items-center space-x-2 rtl:space-x-reverse\">\n                    <span class=\"text-sm font-semibold text-gray-900 dark:text-white\">Generating Tool Call Input</span>\n                    <span class=\"text-sm font-normal text-gray-500 dark:text-gray-400\">${formatTime(timestamp)}</span>\n                </div>\n                <div\n                    class=\"flex flex-col leading-1.5 p-4 border-gray-200 bg-gray-100 rounded-e-xl rounded-es-xl dark:bg-gray-700\">\n                    <div class=\"message-text text-sm font-normal text-gray-900 dark:text-white\">\n                        ${_.escape(input)}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>`)\n    el.data(\"otto-content\", input)\n    return el\n}\n\nfunction messageInputDiv(input, timestamp) {\n    return $(`<div class=\"message-input flex items-start gap-2.5 mb-6\">\n        <div class=\"flex flex-col gap-1 w-full max-w-[320px]\">\n            <div class=\"flex items-center space-x-2 rtl:space-x-reverse\">\n                <span class=\"text-sm font-semibold text-gray-900 dark:text-white\">Step Input</span>\n                <span class=\"text-sm font-normal text-gray-500 dark:text-gray-400\">${formatTime(timestamp)}</span>\n            </div>\n            <div\n                class=\"flex flex-col leading-1.5 p-4 border-gray-200 bg-gray-100 rounded-e-xl rounded-es-xl dark:bg-gray-700\">\n                <div class=\"message-text text-sm font-normal text-gray-900 dark:text-white\">\n                    ${_.escape(input)}\n                </div>\n            </div>\n        </div>\n    </div>`)\n}\n\nfunction messageErrorDiv(input, timestamp) {\n    return $(`<div class=\"message-error flex justify-end\" >\n        <div class=\"flex items-start gap-2.5 mb-6\">\n            <div class=\"flex flex-col gap-1 w-full max-w-[320px]\">\n                <div class=\"flex items-center space-x-2 rtl:space-x-reverse\">\n                    <span class=\"text-sm font-semibold text-gray-900 dark:text-white\">ERROR</span>\n                    <span class=\"text-sm font-normal text-gray-500 dark:text-gray-400\">${formatTime(timestamp)}</span>\n                </div>\n                <div\n                    class=\"flex flex-col leading-1.5 p-4 border-gray-200 bg-gray-100 rounded-e-xl rounded-es-xl dark:bg-gray-700\">\n                    <div class=\"message-text text-sm font-normal text-gray-900 dark:text-white\">\n                        ${_.escape(input)}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>`)\n}\n\nfunction appendToDiv(lastDiv, divClass, newDiv) {\n    const last = lastDiv.children().last()\n    if (last.hasClass(divClass)) {\n        const newContent = (last.data(\"otto-content\") || \"\") + newDiv.data(\"otto-content\")\n        last.data(\"otto-content\", newContent)\n        const t = DOMPurify.sanitize(marked.parse(newContent))\n        last.find('.message-text').html(t)\n    } else {\n        // Otherwise we append a new div\n        lastDiv.append(newDiv)\n    }\n}\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
