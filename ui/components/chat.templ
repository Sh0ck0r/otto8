package components


templ Chat() {
    <div class="flex" >
        <div id="chat"
            x-data="{}"
            class="flex flex-col h-screen w-[700px]" >
            <div id="messages-scroll"
                @message-added="$nextTick(() => { scrollThis($el) })"
                class="h-full overflow-y-scroll bg-white shadow-md rounded-lg p-4" >
                <template x-for="message in $store.chat.messages" >
                    <div class="flex mb-4" :class="message.input ? 'justify-end' : 'justify-start'">
                        <template x-if="message.contentID" >
                            @content()
                        </template>
                        <template x-if="message.input" >
                            @input()
                        </template>
                        <template x-if="message.toolCall" >
                            @toolCall()
                        </template>
                    </div>
                </template>
            </div>

            <textarea
                name="message"
                placeholder="Type your message here"
                @keydown.enter="if (!$event.shiftKey) { chat.submit({prompt: $el.value}); $el.value=''; $event.preventDefault() }"
                class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" ></textarea>
            <div id="status"></div>
        </div>
        @files()
        @chatsidebar()
    </div>
}

templ chatsidebar() {
    <div id="chat-sidebar" >
        <button class="m-4 border-2 p-2 border-black" hx-get="/chat/sidebar">Load Sidebar</button>
    </div>
}

templ content() {
    @message()
}

templ toolCall() {
    <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg bg-blue-500 text-white rounded-br-none" >
        <h1>Tool Call</h1>
        <div x-text="message.toolCall.name" ></div>
        <div x-text="message.toolCall.description" ></div>
        <div x-text="message.toolCall.input" ></div>
    </div>
}

templ message() {
    <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg bg-blue-500 text-white rounded-br-none" >
        <template x-if="message.toolInput" >
            <div style="display: contents">
                <h1>Tool Input</h1>
                <div x-text="message.toolInput.name" ></div>
                <div x-text="message.toolInput.description" ></div>
            </div>
        </template>
        <div x-text="message.content.join('')" ></div>
    </div>
}

templ input() {
    <div x-text="message.input" class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg bg-gray-200 text-gray-800 rounded-bl-none" ></div>
}

templ ChatResponse(err error) {
    if err == nil {
        <div>That worked</div>
    } else {
        <div>Error: {err.Error()}</div>
    }
}

templ files() {
    <!-- Tabs -->
    <div id="files"
        x-show="$store.chat.files.length"
        x-data="{
            selectedId: null,
            select(id) {
                this.selectedId = id
            },
            isSelected(id, idx) {
                if (this.selectedId === null && idx === 0) {
                    return true
                }
                return this.selectedId === id
            },
            whichChild(el, parent) {
                return Array.from(parent.children).indexOf(el) + 1
            }
        }"
        x-id="['tab']"
        class="flex flex-col mx-auto max-w-3xl"
    >
        <!-- Tab List -->
        <ul
            x-ref="tablist"
            @keydown.right.prevent.stop="$focus.wrap().next()"
            @keydown.home.prevent.stop="$focus.first()"
            @keydown.page-up.prevent.stop="$focus.first()"
            @keydown.left.prevent.stop="$focus.wrap().prev()"
            @keydown.end.prevent.stop="$focus.last()"
            @keydown.page-down.prevent.stop="$focus.last()"
            role="tablist"
            class="-mb-px flex items-stretch"
        >
            <!-- Tab -->
            <template x-for="(file, index) in $store.chat.files" >
                <li>
                    <button
                        :id="$id('tab', whichChild($el.parentElement, $refs.tablist))"
                        @click="select($el.id)"
                        @mousedown.prevent
                        @focus="select($el.id)"
                        type="button"
                        :tabindex="isSelected($el.id, index) ? 0 : -1"
                        :aria-selected="isSelected($el.id, index)"
                        :class="isSelected($el.id, index) ? 'border-gray-200 bg-white' : 'border-transparent'"
                        class="inline-flex rounded-t-md border-t border-l border-r px-5 py-2.5"
                        role="tab"
                        x-text="file.name"
                    ></button>
                </li>
            </template>
        </ul>

        <!-- Panels -->
        <div role="tabpanels" class="rounded-b-md border border-gray-200 bg-white grow h-full">
            <!-- Panel -->
            <template x-for="(file, index) in $store.chat.files" >
                <section
                    :data-filename="file.name"
                    x-show="isSelected($id('tab', whichChild($el, $el.parentElement)), index)"
                    :aria-labelledby="$id('tab', whichChild($el, $el.parentElement), index)"
                    role="tabpanel"
                    class="contents" >
                    <textarea
                        x-model="file.content"
                        class="mt-2 text-gray-500 h-full w-full resize-none"></textarea>
                </section>
            </template>
        </div>
        <div class="flex justify-between p-4">
            <button @mousedown.prevent="chat.copySelection($el); chat.explain($el)"
                @click="console.log($el.dataset.selection)">Explain</button>
            <input @mousedown="chat.copySelection($el)"
                @keydown.enter="chat.improve($el)"
                type="text" placeholder="Edit or explain selection"/>
        </div>
    </div>
}