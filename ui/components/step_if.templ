package components

import (
    "github.com/otto8-ai/otto8/apiclient/types"
)

type StepIf struct {
    workflow types.Workflow
    parentID string
    step     types.Step
    toolRefs map[string]*types.ToolReference
}

func NewStepIf(wf types.Workflow, parentID string, step types.Step, toolRefs map[string]*types.ToolReference) templ.Component {
    component := StepIf{
        workflow: wf,
        parentID: parentID,
        step:     step,
        toolRefs: toolRefs,
    }
    return component.main()
}

templ (s StepIf) main() {
    <div hx-ext="morph" id={ "step_" + s.step.ID}>
        <form class="flex" hx-trigger="changed delay:1s, input delay:1s" hx-put={ "/ui/workflows/"+s.workflow.ID+"/steps/"+s.step.ID } hx-swap="morph:outerHTML" hx-target={"#step_" + s.step.ID} >
            <label for="sys.condition" class={"w-14 flex items-center justify-center p-2 text rounded-tl-lg border-b border-b-white dark:border-b-gray-500" + stepsLabelBackgroundColor }>If</label>
            <div class={"grow flex focus-within:ring-1 border rounded-e-lg" + stepsInputBackgroundColor + stepsBorderColor + stepsInputHighlightColor} >
                @s.textarea()
                <div class="flex flex-col justify-start gap-1 p-1">
                    @stepButtons(s.workflow, s.step)
                </div>
            </div>
        </form>
        @s.subSteps()
    </div>
}

templ (s StepIf) subSteps() {
    <div class="flex">
        <span class={"w-14 flex items-center justify-center p-2 text" + stepsLabelBackgroundColor }>Then</span>
        <div class="flex flex-col grow p-4 pr-0 border-b border-l border-gray-200 dark:border-gray-600" >
            @NewSteps(s.workflow, s.step.ID, s.step.If.Steps, s.toolRefs)
        </div>
    </div>
    <div class="flex">
        <span class={"w-14 flex items-center justify-center p-2 text rounded-bl-lg" + stepsLabelBackgroundColor }>Else</span>
        <div class="flex flex-col grow p-4 pr-0 border-b border-l border-gray-200 dark:border-gray-600">
            @NewSteps(s.workflow, s.step.ID + "::else", s.step.If.Else, s.toolRefs)
        </div>
    </div>
}

templ (s StepIf) textarea() {
    <textarea id="sys.condition" name="sys.condition" oninput="autoGrowTextarea(this)" type="text" placeholder="It can swaddle"
        class={"focus:ring-0 focus:border-none border-none min-w-0 grow resize-none h-auto" + stepsInputBackgroundColor} >
        {s.step.If.Condition}
    </textarea>
}