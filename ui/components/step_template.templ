package components

import (
    "github.com/otto8-ai/otto8/apiclient/types"
    "slices"
    "maps"
)

type StepTemplate struct {
    workflow types.Workflow
    parentID string
    step     types.Step
    toolRefs map[string]*types.ToolReference
}

func NewStepTemplate(wf types.Workflow, parentID string, step types.Step, toolRefs map[string]*types.ToolReference) templ.Component {
    component := StepTemplate{
        workflow: wf,
        parentID: parentID,
        step:     step,
        toolRefs: toolRefs,
    }
    return component.main()
}

templ (s StepTemplate) main() {
    <div hx-ext="morph" id={ "step_" + s.step.ID}>
        <form hx-trigger="changed delay:1s, input delay:1s" hx-put={ "/ui/workflows/"+s.workflow.ID+"/steps/"+s.step.ID } hx-swap="morph:outerHTML" hx-target={"#step_" + s.step.ID}
            class={"flex flex-col focus-within:ring-1 border rounded-lg" + stepsInputBackgroundColor + stepsBorderColor + stepsInputHighlightColor} >
            <div class="relative" >
                <h5 class="flex justify-center p-4">{s.templateTitle()}</h5>
                <div class="absolute inset-y-0 right-0 flex items-center gap-1 p-1" >
                    @stepButtons(s.workflow, s.step)
                </div>
            </div>
            @s.fields()
        </form>
    </div>
}

templ (s StepTemplate) fields() {
    for _, arg := range slices.Sorted(maps.Keys(s.step.Template.Args)) {
        <div class="flex m-2" >
            <label for={"template." + arg} class="min-w-14 inline-flex items-center rounded-s-lg px-3 bg-gray-200 border border-e-0 border-gray-300 dark:bg-gray-600 dark:border-gray-600">
                { arg }
            </label>
            <input id={"template." + arg} name={"template." + arg} type="text" value={ s.step.Template.Args[arg] } class="bg-gray-50 border border-gray-300 rounded-e-lg focus:ring-blue-500 focus:border-blue-500 block flex-1 min-w-0 w-full p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">
            if desc := s.argDescription(arg); desc != "" {
                <p class="mt-1 text-sm text-gray-500 dark:text-gray-300">{ desc }</p>
            }
        </div>
    }
}

templ (s StepTemplate) textarea() {
    <textarea id="sys.prompt" name="sys.prompt" oninput="autoGrowTextarea(this)" type="text" placeholder="Say something amazing"
        class={"focus:ring-0 focus:border-none border-none rounded-t-lg min-w-0 grow resize-none h-auto" + stepsInputBackgroundColor} >
        {s.step.Step}
    </textarea>
}

func (s StepTemplate) templateTitle() string {
    var toolRef *types.ToolReference
    if s.step.Template != nil {
        toolRef = s.toolRefs[s.step.Template.Name]
    }
    if toolRef != nil {
        return toolRef.Name
    }
    return s.step.Template.Name
}

func (s StepTemplate) argDescription(argName string) string {
    var toolRef *types.ToolReference
    if s.step.Template != nil {
        toolRef = s.toolRefs[s.step.Template.Name]
    }
    if toolRef != nil {
        return ""
    }
    return toolRef.Params[argName]
}
